// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   
  firstName      String
  lastName       String
  primaryEmail   String
  secondaryEmail String?
  phoneNumber    String?
  dateOfBirth    String
  gender         String
  createdAt      DateTime @default(now())
  // OrganizationPerson OrganizationPerson?
  // TeamPerson     TeamPerson?
  // Task           Task[]
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model Organization {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  projects           Project[]
  teams              Team[]
  OrganizationPerson OrganizationPerson[]
  sprints            Sprint[]
  tasks              Task[]
  websiteLink    String?
  linkedInLink    String?
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model OrganizationPerson {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  userId         String?
  organizationId String?       @db.ObjectId
  // Profile        Profile?      @relation(fields: [profileId], references: [id])
  // profileId      String?       @unique @db.ObjectId  
  status         String?
  createdAt      DateTime      @default(now())

  firstName         String?
  lastName          String?
  emailAddress      String?
  hierarchyLevel    String?

  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model Team {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  teamPersons    TeamPerson[]
  sprintTeam     SprintTeam[]
  createdAt      DateTime      @default(now())
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model TeamPerson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Team      Team?    @relation(fields: [teamId], references: [id])
  userId    String?
  teamId    String?  @db.ObjectId
  // profile   Profile? @relation(fields: [profileId], references: [id])
  // profileId String?  @unique @db.ObjectId  
  createdAt DateTime @default(now())

  firstName         String?
  lastName          String?
  emailAddress      String?
  hierarchyLevel    String?

  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model Project {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  createdAt      DateTime      @default(now())
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  sprints        Sprint[]
  tasks          Task[]
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  
  motive      String?
  information String?
  resources   String?
  documentation String?
  links       String?
  feedback    String?
  budget      String?
  githubLink      String?
  updatedAt      DateTime @updatedAt
}

model Sprint {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime    @default(now())
  Project     Project?    @relation(fields: [projectId], references: [id])
  projectId   String?     @db.ObjectId
  sprintTeam  SprintTeam[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId

  requirementsGathering String?
  designTheRequirements String?
  tasks       Task[]
  testing String?
  feedback    String?

  bugs        String?
  information String?
  resources   String?
  documentation String?
  links       String?

  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

model SprintTeam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?   @db.ObjectId
  Sprint    Sprint?  @relation(fields: [sprintId], references: [id])
  sprintId  String?   @db.ObjectId
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}

// model Task {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String?  @unique
//   profileId   String?  @db.ObjectId
//   name        String
//   description String?
//   createdAt   DateTime @default(now())
//   flag        String?  @default("green")
//   dueDate     DateTime?
//   assignedTo  String?  @unique
//   organizationId String?       @db.ObjectId
//   projectId   String?       @db.ObjectId
//   sprintId    String?  @db.ObjectId
//   isComplete  Boolean  @default(false)
//   bugs        String?
//   information String?
//   resources   String?
//   documentation String?
//   links       String?
//   feedback       String?
//   profile     Profile? @relation(fields: [profileId], references: [id])
//   Organization   Organization? @relation(fields: [organizationId], references: [id])
//   Project     Project? @relation(fields: [projectId], references: [id])
//   Sprint      Sprint?  @relation(fields: [sprintId], references: [id])
// }

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fromPerson  String? // userId
  toPerson    String? // userId
  priority    String?
  createdAt   DateTime @default(now())
  startDate   DateTime?
  dueDate     DateTime?
  active      Boolean @default(true)
  isComplete  Boolean  @default(false)

  name        String?
  description String?

  profileId   String?  @db.ObjectId
  organizationId   String?  @db.ObjectId
  projectId   String?  @db.ObjectId
  sprintId   String?  @db.ObjectId

  bugs        String?
  information String?
  resources   String?
  documentation String?
  links       String?
  feedback    String?

  // profile     Profile? @relation(fields: [profileId], references: [id])
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  Project     Project? @relation(fields: [projectId], references: [id])
  Sprint      Sprint?  @relation(fields: [sprintId], references: [id]) 

  // taskInformation TaskInformation?
  field1         String?
  field2         String?
  field3         String?
  field4         String?
  field5         String?
  updatedAt      DateTime @updatedAt
}


// model TaskInformation {
  
//   Task      Task?    @relation(fields: [taskId], references: [id])
//   taskId    String?  @unique @db.ObjectId

//   name      String?
// }




